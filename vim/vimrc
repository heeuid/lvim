filetype off

call plug#begin()

" git
Plug 'airblade/vim-gitgutter'      " git change status
Plug 'tpope/vim-fugitive'          " vim git wrapper

" airline
Plug 'vim-airline/vim-airline'     " vim status bar

" nerdtree
Plug 'preservim/nerdtree'		" directory tree
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin' " nerd tree git plugin
"let g:NERDTreeGitStatusIndicatorMapCustom = {
"                \ 'Modified'  :'✹',
"                \ 'Staged'    :'✚',
"                \ 'Untracked' :'✭',
"                \ 'Renamed'   :'➜',
"                \ 'Unmerged'  :'═',
"                \ 'Deleted'   :'✖',
"                \ 'Dirty'     :'✗',
"                \ 'Ignored'   :'☒',
"                \ 'Clean'     :'✔︎',
"                \ 'Unknown'   :'?',
"                \ }

" search
Plug 'ctrlpvim/ctrlp.vim'          " ctrl p search
" auto pair
Plug 'jiangmiao/auto-pairs'        " pairs quotes or braket
" dev icon
Plug 'ryanoasis/vim-devicons'      " dev icons for vim

"tagbar
Plug 'preservim/tagbar'		" ctags: code database (class func var ...)

":Files :Rg :Tags
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " fzf needs 2 plugin (this & below)
Plug 'junegunn/fzf.vim'		" fuzzy finder

" vim tags
"Plugin 'ludovicchabant/vim-gutentags'	" auto 'ctags -R' every storation (with git; so need .git directory)

" scrollbar in statusline
Plug 'gcavallanti/vim-noscrollbar'	" scrollbar at statusline 'set statusline=~~~\ [%{noscrollbar#statusline()}]'

" tabline
Plug 'mkitt/tabline.vim'		" config tab title

" indent
Plug 'Yggdroot/indentLine'

" smooth scroll
"Plug 'terryma/vim-smooth-scroll'

" multi cursor
"Plug 'terryma/vim-multiple-cursors'

" vim surround
Plug 'tpope/vim-surround'

" vim theme
Plug 'mhartington/oceanic-next'

" for auto complete
Plug 'neoclide/coc.nvim', {'branch': 'release'}
":CocInstall coc-rust-analyzer
":CocInstall coc-clangd
":CocInstall coc-pyright
":CocInstall coc-flutter[-tools]

"Plug 'dense-analysis/ale'

" language specific
Plug 'rust-lang/rust.vim'
Plug 'ziglang/zig.vim'
Plug 'dart-lang/dart-vim-plugin'

call plug#end()

filetype plugin indent on

" syntax on
if has('syntax')
	syntax on
endif

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to au

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let "
"""""""
" default: '\'
let g:mapleader = ' '
let g:maplocalleader = ' '

"" NERDTree
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeShowHidden=1
" let NERDTreeMapOpenInTab='<space>'
" let NERDTreeQuitOnOpen=1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|vendor$',
    \ 'file': '\v\.(exe|so|dll)$'
\ }
let g:ctrlp_user_command =
            \ ['.git', 'cd %s && git ls-files -co --exclude-standard']

"" tabline
let g:tablineclosebutton=1

"" indent line
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

"" rust
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0

let g:airline#extensions#tabline#enabled = 1              " vim-airline 버퍼 목록 켜기
let g:airline#extensions#tabline#fnamemod = ':t'          " vim-airline 버퍼 목록 파일명만 출력
let g:airline#extensions#tabline#buffer_nr_show = 1       " buffer number를 보여준다
let g:airline#extensions#tabline#buffer_nr_format = '%s:' " buffer number format

"" multiple cursor
"let g:multi_cursor_use_default_mapping=-1
"let g:multi_cursor_next_key='<C-n>'
"let g:multi_cursor_prev_key='<C-p>'
"let g:multi_cursor_skip_key='<C-x>'
"let g:multi_cursor_quit_key='<Esc>'

"" Termdebug
" :packadd termdebug
" :Termdebug file
" :Winbar
" :Run 
" :Arguments argu
" :Break :Clear
" :Step :Over :Finish :Continue :Stop : Evaulate
if v:version >= 801
	packadd termdebug
	let g:termdebug_wide = 1 " vertical split
	"let g:termdebugger='/usr/bin/gdb-multiarch'
endif

" Theme
syntax enable
colorscheme OceanicNext
let g:airline_theme='oceanicnext'

" cursor line setting
" Ps = 0 -> blinking block.
" Ps = 1 -> blinking block (default).
" Ps = 2 -> steady block.
" Ps = 3 -> blinking underline.
" Ps = 4 -> steady underline.
" Ps = 5 -> blinking bar (xterm).
" Ps = 6 -> steady bar (xterm).
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

""end-let""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" map "
"""""""
"" mapleader
nmap \ <Space>

"" NERDTree
"map <Leader>nt <ESC>:NERDTree<CR>
map <Leader>e <ESC>:NERDTreeToggle<CR>

"" Tagbar
map <Leader>t <ESC>:Tagbar<CR> 

"" CoC
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
"" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition) " go back with <C-o>
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

"" vim smooth scroll
"noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 10, 5)<CR>
"noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 10, 5)<CR>
"noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 10, 3)<CR>
"noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 10, 3)<CR>

"" buffer
nmap <tab> <ESC>:bn<CR>
nmap <S-tab> <ESC>:bp<CR>
nmap <leader>d <ESC>:bd<CR>
nmap <leader><tab> <ESC>:enew<cr>

"" window
nmap <C-h> <C-w>h<ESC>
nmap <C-j> <C-w>j<ESC>
nmap <C-k> <C-w>k<ESC>
nmap <C-l> <C-w>l<ESC>

"" insert mode: imap
imap <C-L> <Delete>

"" dec/inc height/width
" horizontal
map _ <ESC>:res -1<CR>
map + <ESC>:res +1<CR>
" vertical
map - <ESC><C-W><
map = <ESC><C-W>>

map <F5> <ESC>:set mouse-=a<CR>
map <F6> <ESC>:set mouse+=a<CR>
map <leader>w <ESC>:w<CR>
map <leader>q <ESC>:q!<CR>

"" coc.nvim
"inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
"inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
""end-map""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set "
"""""""

set mouse+=a                    " use mouse mode
set autoread                    " file change => auto read change
set fileformats=unix,dos,mac    " fmt applying order
set encoding=utf-8		        " encoding for showing
set termencoding=utf-8	        " encoding for writing
set nu                          " line number
set ruler		                " show current cursor position
set title                       " title of window
set showmatch	                " bracket match ({} and jump next to })
"set laststatus=2
"set statusline=\ [%{noscrollbar#statusline(20,'-','#')}\ %P]\ %<%l:%v\ %h%m%r\ %=%a%F\
" set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\
set cursorline                  " show cursor line
set colorcolumn=80              " show column line
set autoindent
set tabstop=4                   " tab key --> 4 spaces size
set softtabstop=4
set shiftwidth=4                " << or >> --> 4 spaces size
set expandtab                   " change tab to spaces
set ignorecase                  " when search, ignore letter case
"set nohlsearch
set hlsearch                    " wgeb search, highlight. (:noh = off it)
" copy-paste 
" vim --version => if +clipboard, then (visual mode & '"+y'), ('"+p') work
" 'clipboard' needs vim-gtk
if has('clipboard')
	" set the vim clipboard into the system clipboard
	set clipboard=unnamedplus " linux: unamedplus, windows/macos: unamed
endif
"set splitright                 " vertical split
"set splitbelow                 " (horizontal) split
set belloff=all                 " bell sound/visual off
set backspace=indent,eol,start  " can delete with backspace in indent, eol, ..
set guifont=D2Coding\ Nerd      " for gvim

" color
"colorscheme torte
"set t_Co=256 " 256 colors
"set notermguicolors "gui X  cterm O
"highlight Normal ctermfg=LightGrey ctermbg=235 guifg=Grey80 guibg=#3a3a3a
" set term=screen-256color
if (has("termguicolors"))
    set termguicolors
endif

""end-set""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd "
"""""""""""
" put cursor on the last updated position
au BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\ exe "norm g`\"" |
\ endif

" automatic NERDTree mirroring on tab switching
" when having just one window in the tab
"function MirrorNerdTreeIfOneWindow()
"  if winnr("$") < 2
"    NERDTreeMirror
"
"    " hack to move the focus from the NERDTree to the main window
"    wincmd p
"    wincmd l
"  endif
"endfunction
"
"autocmd GuiEnter * silent NERDTree
"autocmd VimEnter * silent NERDTree
"autocmd TabEnter * silent exe MirrorNerdTreeIfOneWindow()

""end-autocmd""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" coc settings "
""""""""""""""""

" May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
" utf-8 byte sequence
set encoding=utf-8
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

""end coc settings""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
